priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}${0}
}${1/.+/ \/* /m}namespace $1${1/.+/ *\/ /m}
endsnippet

snippet up "std::unique_ptr"
std::unique_ptr<${1:`!p
klass = snip.v.text or "klass"
snip.rv = klass[:-1] if klass.endswith("*") else klass
`}>$0
endsnippet

snippet map "std::map"
std::map<${1:key}, ${2:value}>$0
endsnippet

snippet vector "std::vector"
std::vector<${1:int}>$0
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>$0
endsnippet

snippet fore "for (each)" b
for (${3:auto&&} $2 : $1) {
	${0}
}
endsnippet

snippet scast "static cast"
static_cast<$1>(${2:${VISUAL}})$0
endsnippet

snippet rcast "reinterpret cast"
reinterpret_cast<$1>(${2:${VISUAL}})$0
endsnippet

snippet dcast "dynamic cast"
dynamic_cast<$1>(${2:${VISUAL}})$0
endsnippet

snippet lambda "lambda"
[$1](${2:/* args */})${3: /* modifiers */}${5: -> /* return */} {
	${VISUAL}$0
}
endsnippet

snippet lammin "minimal lambda"
[$1] {
	${VISUAL}$0
}
endsnippet

# vim:ft=snippets:
